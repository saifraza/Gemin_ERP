generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== CORE MODELS ====================

model Company {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  gstNumber String?
  panNumber String?
  address   Json
  phone     String
  email     String
  website   String?
  logo      String?
  
  factories Factory[]
  users     User[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([code])
}

model Factory {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  code        String   @unique
  type        FactoryType
  location    Json
  coordinates Json?    // {lat, lng}
  capacity    Json     // {sugar: 5000, ethanol: 100000, power: 30, feed: 200}
  
  company     Company  @relation(fields: [companyId], references: [id])
  divisions   Division[]
  equipment   Equipment[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([companyId, code])
}

model User {
  id            String   @id @default(cuid())
  companyId     String
  email         String   @unique
  username      String   @unique
  passwordHash  String
  role          Role     @default(VIEWER) // Default system role
  name          String
  phone         String?
  avatar        String?
  isActive      Boolean  @default(true)
  
  company       Company  @relation(fields: [companyId], references: [id])
  sessions      Session[]
  activities    ActivityLog[]
  userRoles     UserRole[]
  userPermissions UserPermission[]
  resourceAccess ResourceAccess[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([email, username])
}

// ==================== RBAC MODELS ====================

model RoleDefinition {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  level       Int      // Hierarchy level (100=MD, 90=CTO, 80=Director, 70=Manager, etc.)
  parentId    String?  // For role hierarchy
  isSystem    Boolean  @default(false) // System roles can't be deleted
  
  parent      RoleDefinition? @relation("RoleHierarchy", fields: [parentId], references: [id])
  children    RoleDefinition[] @relation("RoleHierarchy")
  permissions RolePermission[]
  userRoles   UserRole[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([level])
}

model Module {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  icon        String?
  path        String?  // Frontend route path
  isActive    Boolean  @default(true)
  
  subModules  SubModule[]
  permissions Permission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SubModule {
  id          String   @id @default(cuid())
  moduleId    String
  name        String
  code        String
  description String?
  path        String?
  isActive    Boolean  @default(true)
  
  module      Module   @relation(fields: [moduleId], references: [id])
  permissions Permission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([moduleId, code])
}

model Permission {
  id           String   @id @default(cuid())
  moduleId     String
  subModuleId  String?
  name         String
  code         String   @unique
  action       PermissionAction
  description  String?
  
  module       Module   @relation(fields: [moduleId], references: [id])
  subModule    SubModule? @relation(fields: [subModuleId], references: [id])
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([moduleId, action])
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  granted      Boolean  @default(true)
  conditions   Json?    // Additional conditions for the permission
  
  role         RoleDefinition @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  
  createdAt    DateTime @default(now())
  
  @@unique([roleId, permissionId])
}

model UserRole {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  scope      AccessScope
  scopeId    String?  // ID of company/factory/division based on scope
  validFrom  DateTime @default(now())
  validUntil DateTime?
  isActive   Boolean  @default(true)
  
  user       User     @relation(fields: [userId], references: [id])
  role       RoleDefinition @relation(fields: [roleId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([userId, isActive])
  @@unique([userId, roleId, scope, scopeId])
}

model UserPermission {
  id           String   @id @default(cuid())
  userId       String
  permissionId String
  granted      Boolean  // true = grant, false = revoke
  scope        AccessScope
  scopeId      String?
  reason       String?  // Why this override was added
  grantedBy    String?  // Admin who granted this
  
  user         User     @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  
  createdAt    DateTime @default(now())
  expiresAt    DateTime?
  
  @@index([userId, permissionId])
}

model ResourceAccess {
  id           String   @id @default(cuid())
  userId       String
  resourceType ResourceType
  resourceId   String
  accessLevel  AccessLevel
  conditions   Json?    // Additional access conditions
  
  user         User     @relation(fields: [userId], references: [id])
  
  createdAt    DateTime @default(now())
  expiresAt    DateTime?
  
  @@index([userId, resourceType, resourceId])
  @@unique([userId, resourceType, resourceId])
}

// ==================== MCP & AI MODELS ====================

model MCPTool {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  description String
  schema      Json     // Tool input/output schema
  handler     String   // Function name or endpoint
  isActive    Boolean  @default(true)
  
  executions  ToolExecution[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ToolExecution {
  id         String   @id @default(cuid())
  toolId     String
  userId     String?
  input      Json
  output     Json?
  status     ExecutionStatus
  error      String?
  duration   Int?     // milliseconds
  llmModel   String?
  
  tool       MCPTool  @relation(fields: [toolId], references: [id])
  
  createdAt  DateTime @default(now())
}

model AIConversation {
  id         String   @id @default(cuid())
  userId     String
  title      String?
  context    Json?
  messages   AIMessage[]
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AIMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // user, assistant, system
  content        String
  toolCalls      Json?
  model          String?
  tokens         Int?
  
  conversation   AIConversation @relation(fields: [conversationId], references: [id])
  
  createdAt      DateTime @default(now())
}

// ==================== FACTORY OPERATIONS ====================

model Division {
  id          String   @id @default(cuid())
  factoryId   String
  type        DivisionType
  name        String
  code        String
  isActive    Boolean  @default(true)
  
  factory     Factory  @relation(fields: [factoryId], references: [id])
  departments Department[]
  equipment   Equipment[]
  production  ProductionBatch[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([factoryId, code])
}

model Equipment {
  id           String   @id @default(cuid())
  factoryId    String
  divisionId   String?
  name         String
  code         String   @unique
  type         String
  manufacturer String?
  model        String?
  serialNumber String?
  status       EquipmentStatus @default(OPERATIONAL)
  location     Json?
  specs        Json?
  
  factory      Factory  @relation(fields: [factoryId], references: [id])
  division     Division? @relation(fields: [divisionId], references: [id])
  telemetry    EquipmentTelemetry[]
  maintenance  MaintenanceRecord[]
  
  installedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([factoryId, status])
}

model EquipmentTelemetry {
  id          String   @id @default(cuid())
  equipmentId String
  timestamp   DateTime @default(now())
  metrics     Json     // {temperature: 85, pressure: 25, vibration: 0.02}
  status      String
  alerts      Json?
  
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  
  @@index([equipmentId, timestamp])
}

// ==================== PRODUCTION ====================

model ProductionBatch {
  id           String   @id @default(cuid())
  divisionId   String
  batchNumber  String   @unique
  productType  String
  quantity     Float
  unit         String
  quality      Json?
  status       BatchStatus
  
  division     Division @relation(fields: [divisionId], references: [id])
  parameters   ProductionParameter[]
  
  startedAt    DateTime
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([divisionId, status])
}

model ProductionParameter {
  id        String   @id @default(cuid())
  batchId   String
  name      String
  value     Float
  unit      String
  timestamp DateTime @default(now())
  
  batch     ProductionBatch @relation(fields: [batchId], references: [id])
  
  @@index([batchId, timestamp])
}

// ==================== EVENTS & WORKFLOWS ====================

model Event {
  id        String   @id @default(cuid())
  type      String
  source    String
  data      Json
  metadata  Json?
  processed Boolean  @default(false)
  
  workflows WorkflowInstance[]
  
  createdAt DateTime @default(now())
  
  @@index([type, processed, createdAt])
}

model WorkflowTemplate {
  id          String   @id @default(cuid())
  name        String
  category    String
  trigger     Json     // Event conditions
  steps       Json     // BPMN-like definition
  isActive    Boolean  @default(true)
  
  instances   WorkflowInstance[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkflowInstance {
  id         String   @id @default(cuid())
  templateId String
  eventId    String?
  status     WorkflowStatus
  context    Json
  currentStep String?
  error      String?
  
  template   WorkflowTemplate @relation(fields: [templateId], references: [id])
  event      Event? @relation(fields: [eventId], references: [id])
  
  startedAt  DateTime @default(now())
  completedAt DateTime?
  
  @@index([templateId, status])
}

// ==================== SUPPORTING MODELS ====================

model Department {
  id         String   @id @default(cuid())
  divisionId String
  name       String
  code       String
  head       String?
  
  division   Division @relation(fields: [divisionId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([divisionId, code])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([token, expiresAt])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  data      Json?
  ip        String?
  userAgent String?
  
  user      User?    @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([userId, entity, createdAt])
}

model MaintenanceRecord {
  id           String   @id @default(cuid())
  equipmentId  String
  type         MaintenanceType
  description  String
  performedBy  String
  cost         Float?
  nextDue      DateTime?
  
  equipment    Equipment @relation(fields: [equipmentId], references: [id])
  
  performedAt  DateTime @default(now())
  createdAt    DateTime @default(now())
  
  @@index([equipmentId, type])
}

// ==================== ENUMS ====================

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  OPERATOR
  VIEWER
}

enum FactoryType {
  INTEGRATED  // All divisions
  SUGAR_ONLY
  DISTILLERY
  COGEN
}

enum DivisionType {
  SUGAR
  ETHANOL
  POWER
  FEED
  COMMON
}

enum EquipmentStatus {
  OPERATIONAL
  MAINTENANCE
  FAULT
  IDLE
  DECOMMISSIONED
}

enum BatchStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  REJECTED
  ON_HOLD
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  TIMEOUT
}

enum WorkflowStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  PREDICTIVE
  EMERGENCY
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  APPROVE
  REJECT
  EXPORT
  IMPORT
  EXECUTE
}

enum AccessScope {
  GLOBAL       // System-wide access
  COMPANY      // Company level
  FACTORY      // Factory/Business Unit level
  DIVISION     // Division level
  DEPARTMENT   // Department level
}

enum ResourceType {
  REPORT
  DOCUMENT
  WORKFLOW
  DATA_EXPORT
  CONFIGURATION
}

enum AccessLevel {
  VIEW
  EDIT
  ADMIN
  OWNER
}