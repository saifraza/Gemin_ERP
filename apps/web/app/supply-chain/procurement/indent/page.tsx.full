'use client';

export const dynamic = 'force-dynamic';

import { useState, useEffect } from 'react';
import { DashboardLayout } from '@/components/layout/dashboard-layout';
import { useIndents, useCreateIndent, useApproveIndent } from '@/hooks/use-procurement';
import { useFactories } from '@/hooks/use-factories';
import { useAuth } from '@/contexts/auth-context';
import { useToast } from '@/components/ui/use-toast';
import { format } from 'date-fns';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { DataTable } from '@/components/ui/data-table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { 
  FileText, 
  Plus,
  Search,
  Filter,
  Clock,
  CheckCircle,
  AlertCircle,
  XCircle,
  Calendar,
  Package,
  User,
  Building,
  Hash,
  ArrowRight,
  FileSearch,
  Send,
  ShoppingCart,
  RefreshCw
} from 'lucide-react';


export default function MaterialIndentPage() {
  const [activeTab, setActiveTab] = useState('all-indents');
  const [showCreateIndent, setShowCreateIndent] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndent, setSelectedIndent] = useState<any>(null);
  const [statusFilter, setStatusFilter] = useState('all');
  const [priorityFilter, setPriorityFilter] = useState('all');
  const [currentPage, setCurrentPage] = useState(1);
  const [formData, setFormData] = useState({
    itemName: '',
    itemCode: '',
    quantity: '',
    unit: 'MT',
    factoryId: '',
    departmentId: '',
    requiredDate: '',
    priority: 'MEDIUM' as const,
    description: '',
    specifications: ''
  });
  const [approvalRemarks, setApprovalRemarks] = useState('');
  const [mounted, setMounted] = useState(false);

  // Only run hooks after mounting
  useEffect(() => {
    setMounted(true);
  }, []);

  // Get auth context
  const { user } = useAuth();
  const { toast } = useToast();

  // Fetch data
  const { data: indentsData, isLoading, refetch } = useIndents({
    status: statusFilter === 'all' ? undefined : statusFilter,
    priority: priorityFilter === 'all' ? undefined : priorityFilter,
    page: currentPage,
    limit: 10,
  });
  
  const { data: factoriesData } = useFactories();
  const createIndentMutation = useCreateIndent();
  const approveIndentMutation = useApproveIndent();

  // Show loading state during SSR
  if (!mounted) {
    return (
      <DashboardLayout>
        <div className="p-6">
          <div className="flex items-center justify-center h-96">
            <RefreshCw className="w-8 h-8 animate-spin text-gray-400" />
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Process real data
  const indents = indentsData?.data || [];
  const pendingIndents = indents.filter(indent => indent.status === 'PENDING');
  const myIndents = indents.filter(indent => indent.requestedById === user?.id);
  
  // Calculate stats
  const stats = {
    total: indentsData?.total || 0,
    pending: indents.filter(i => i.status === 'PENDING').length,
    approved: indents.filter(i => i.status === 'APPROVED').length,
    rfqCreated: indents.filter(i => i.status === 'RFQ_CREATED').length
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      'PENDING': { variant: 'outline' as const, icon: Clock, color: 'text-yellow-600' },
      'APPROVED': { variant: 'default' as const, icon: CheckCircle, color: 'text-green-600' },
      'REJECTED': { variant: 'destructive' as const, icon: XCircle, color: 'text-red-600' },
      'RFQ_CREATED': { variant: 'secondary' as const, icon: FileSearch, color: 'text-blue-600' },
      'PO_CREATED': { variant: 'secondary' as const, icon: ShoppingCart, color: 'text-purple-600' },
      'COMPLETED': { variant: 'default' as const, icon: CheckCircle, color: 'text-gray-600' },
      'CANCELLED': { variant: 'outline' as const, icon: XCircle, color: 'text-gray-400' }
    };

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.PENDING;
    const Icon = config.icon;

    return (
      <Badge variant={config.variant}>
        <Icon className={`w-3 h-3 mr-1 ${config.color}`} />
        {status.replace(/_/g, ' ')}
      </Badge>
    );
  };

  const getPriorityBadge = (priority: string) => {
    const priorityConfig = {
      'URGENT': { variant: 'destructive' as const, color: 'text-red-600' },
      'HIGH': { variant: 'destructive' as const, color: 'text-orange-600' },
      'MEDIUM': { variant: 'secondary' as const, color: 'text-yellow-600' },
      'LOW': { variant: 'outline' as const, color: 'text-gray-600' }
    };

    const config = priorityConfig[priority as keyof typeof priorityConfig] || priorityConfig.MEDIUM;

    return (
      <Badge variant={config.variant}>
        {priority}
      </Badge>
    );
  };

  const indentColumns = [
    { key: 'indentNumber', label: 'Indent No.' },
    { key: 'itemName', label: 'Item Name' },
    { key: 'itemCode', label: 'Item Code' },
    { 
      key: 'quantity', 
      label: 'Quantity',
      render: (item: any) => `${item.quantity} ${item.unit}`
    },
    { 
      key: 'factory', 
      label: 'Factory',
      render: (item: any) => item.factory?.name || '-'
    },
    { 
      key: 'requestedBy', 
      label: 'Requested By',
      render: (item: any) => item.requestedBy?.name || '-'
    },
    { 
      key: 'priority', 
      label: 'Priority',
      render: (item: any) => getPriorityBadge(item.priority)
    },
    { 
      key: 'status', 
      label: 'Status',
      render: (item: any) => getStatusBadge(item.status)
    },
    { 
      key: 'requiredDate', 
      label: 'Required Date',
      render: (item: any) => format(new Date(item.requiredDate), 'dd MMM yyyy')
    },
    {
      key: 'actions',
      label: 'Actions',
      render: (item: any) => (
        <div className="flex gap-2">
          {item.status === 'PENDING' && (
            <Button size="sm" variant="outline" onClick={() => setSelectedIndent(item)}>
              Review
            </Button>
          )}
          {item.status === 'APPROVED' && (
            <Button size="sm" variant="outline">
              <FileSearch className="w-3 h-3 mr-1" />
              Create RFQ
            </Button>
          )}
        </div>
      )
    }
  ];

  // Handle create indent
  const handleCreateIndent = async () => {
    try {
      await createIndentMutation.mutateAsync({
        itemName: formData.itemName,
        itemCode: formData.itemCode || undefined,
        quantity: parseFloat(formData.quantity),
        unit: formData.unit,
        factoryId: formData.factoryId,
        departmentId: formData.departmentId || undefined,
        requiredDate: new Date(formData.requiredDate).toISOString(),
        priority: formData.priority,
        description: formData.description || undefined,
        specifications: formData.specifications || undefined,
      });
      
      toast({
        title: 'Success',
        description: 'Material indent created successfully',
      });
      
      setShowCreateIndent(false);
      setFormData({
        itemName: '',
        itemCode: '',
        quantity: '',
        unit: 'MT',
        factoryId: '',
        departmentId: '',
        requiredDate: '',
        priority: 'MEDIUM' as const,
        description: '',
        specifications: ''
      });
      refetch();
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to create material indent',
        variant: 'destructive',
      });
    }
  };

  // Handle approve/reject indent
  const handleApproveReject = async (approved: boolean) => {
    if (!selectedIndent) return;
    
    try {
      await approveIndentMutation.mutateAsync({
        id: selectedIndent.id,
        approved,
        rejectionReason: !approved ? approvalRemarks : undefined,
      });
      
      toast({
        title: 'Success',
        description: `Material indent ${approved ? 'approved' : 'rejected'} successfully`,
      });
      
      setSelectedIndent(null);
      setApprovalRemarks('');
      refetch();
    } catch (error) {
      toast({
        title: 'Error',
        description: `Failed to ${approved ? 'approve' : 'reject'} material indent`,
        variant: 'destructive',
      });
    }
  };

  return (
    <DashboardLayout>
      <div className="p-6">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Material Indents</h1>
            <p className="text-gray-600 mt-1">Raise and manage material requirements</p>
          </div>
          <Button onClick={() => setShowCreateIndent(true)}>
            <Plus className="w-4 h-4 mr-2" />
            Create Indent
          </Button>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <Card className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Indents</p>
                <p className="text-2xl font-bold">{stats.total}</p>
              </div>
              <FileText className="w-8 h-8 text-gray-400 opacity-20" />
            </div>
          </Card>
          <Card className="p-4 border-l-4 border-l-yellow-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Pending Approval</p>
                <p className="text-2xl font-bold">{stats.pending}</p>
              </div>
              <Clock className="w-8 h-8 text-yellow-500 opacity-20" />
            </div>
          </Card>
          <Card className="p-4 border-l-4 border-l-green-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Approved</p>
                <p className="text-2xl font-bold">{stats.approved}</p>
              </div>
              <CheckCircle className="w-8 h-8 text-green-500 opacity-20" />
            </div>
          </Card>
          <Card className="p-4 border-l-4 border-l-blue-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">RFQ Created</p>
                <p className="text-2xl font-bold">{stats.rfqCreated}</p>
              </div>
              <FileSearch className="w-8 h-8 text-blue-500 opacity-20" />
            </div>
          </Card>
        </div>

        {/* Main Content */}
        <Card>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <div className="border-b">
              <TabsList className="w-full justify-start h-auto p-0 bg-transparent">
                <TabsTrigger 
                  value="all-indents" 
                  className="data-[state=active]:border-b-2 rounded-none px-6 py-3"
                >
                  All Indents
                </TabsTrigger>
                <TabsTrigger 
                  value="pending-approval" 
                  className="data-[state=active]:border-b-2 rounded-none px-6 py-3"
                >
                  <Clock className="w-4 h-4 mr-2" />
                  Pending Approval ({pendingIndents.length})
                </TabsTrigger>
                <TabsTrigger 
                  value="my-indents" 
                  className="data-[state=active]:border-b-2 rounded-none px-6 py-3"
                >
                  My Indents
                </TabsTrigger>
              </TabsList>
            </div>

            <div className="p-6">
              {/* Search and Filters */}
              <div className="flex gap-4 mb-6">
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                  <Input
                    placeholder="Search by indent no., item name, or department..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>
                <Select defaultValue="all">
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="Department" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Factories</SelectItem>
                    {factoriesData?.map(factory => (
                      <SelectItem key={factory.id} value={factory.id}>
                        {factory.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Select value={priorityFilter} onValueChange={setPriorityFilter}>
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="Priority" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Priorities</SelectItem>
                    <SelectItem value="URGENT">Urgent</SelectItem>
                    <SelectItem value="HIGH">High</SelectItem>
                    <SelectItem value="MEDIUM">Medium</SelectItem>
                    <SelectItem value="LOW">Low</SelectItem>
                  </SelectContent>
                </Select>
                <Button variant="outline" size="icon" onClick={() => refetch()}>
                  <RefreshCw className="w-4 h-4" />
                </Button>
              </div>

              {/* Tab Content */}
              <TabsContent value="all-indents" className="mt-0">
                {isLoading ? (
                  <div className="flex items-center justify-center py-12">
                    <RefreshCw className="w-6 h-6 animate-spin text-gray-400" />
                  </div>
                ) : indents.length > 0 ? (
                  <DataTable
                    columns={indentColumns}
                    data={indents}
                  />
                ) : (
                  <div className="text-center py-12">
                    <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">No material indents found</p>
                    <Button className="mt-4" variant="outline" onClick={() => setShowCreateIndent(true)}>
                      Create First Indent
                    </Button>
                  </div>
                )}
              </TabsContent>

              <TabsContent value="pending-approval" className="mt-0">
                {isLoading ? (
                  <div className="flex items-center justify-center py-12">
                    <RefreshCw className="w-6 h-6 animate-spin text-gray-400" />
                  </div>
                ) : pendingIndents.length > 0 ? (
                  <DataTable
                    columns={indentColumns}
                    data={pendingIndents}
                  />
                ) : (
                  <div className="text-center py-12">
                    <Clock className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">No pending approvals</p>
                  </div>
                )}
              </TabsContent>

              <TabsContent value="my-indents" className="mt-0">
                {isLoading ? (
                  <div className="flex items-center justify-center py-12">
                    <RefreshCw className="w-6 h-6 animate-spin text-gray-400" />
                  </div>
                ) : myIndents.length > 0 ? (
                  <DataTable
                    columns={indentColumns}
                    data={myIndents}
                  />
                ) : (
                  <div className="text-center py-12">
                    <User className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">You haven't created any indents yet</p>
                    <Button className="mt-4" variant="outline" onClick={() => setShowCreateIndent(true)}>
                      Create Your First Indent
                    </Button>
                  </div>
                )}
              </TabsContent>
            </div>
          </Tabs>
        </Card>

        {/* Create Indent Dialog */}
        <Dialog open={showCreateIndent} onOpenChange={setShowCreateIndent}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Create Material Indent</DialogTitle>
              <DialogDescription>
                Raise a new material requirement request
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="item-name">Item Name</Label>
                  <Input 
                    id="item-name" 
                    placeholder="Enter item name" 
                    value={formData.itemName}
                    onChange={(e) => setFormData({ ...formData, itemName: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="item-code">Item Code</Label>
                  <Input 
                    id="item-code" 
                    placeholder="Enter item code" 
                    value={formData.itemCode}
                    onChange={(e) => setFormData({ ...formData, itemCode: e.target.value })}
                  />
                </div>
              </div>
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="quantity">Quantity</Label>
                  <Input 
                    id="quantity" 
                    type="number" 
                    placeholder="0" 
                    value={formData.quantity}
                    onChange={(e) => setFormData({ ...formData, quantity: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="unit">Unit</Label>
                  <Select value={formData.unit} onValueChange={(value) => setFormData({ ...formData, unit: value })}>
                    <SelectTrigger id="unit">
                      <SelectValue placeholder="Select unit" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="MT">MT</SelectItem>
                      <SelectItem value="KG">KG</SelectItem>
                      <SelectItem value="Units">Units</SelectItem>
                      <SelectItem value="Liters">Liters</SelectItem>
                      <SelectItem value="Meters">Meters</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="required-date">Required Date</Label>
                  <Input 
                    id="required-date" 
                    type="date" 
                    value={formData.requiredDate}
                    onChange={(e) => setFormData({ ...formData, requiredDate: e.target.value })}
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="factory">Factory</Label>
                  <Select value={formData.factoryId} onValueChange={(value) => setFormData({ ...formData, factoryId: value })}>
                    <SelectTrigger id="factory">
                      <SelectValue placeholder="Select factory" />
                    </SelectTrigger>
                    <SelectContent>
                      {factoriesData?.map(factory => (
                        <SelectItem key={factory.id} value={factory.id}>
                          {factory.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="priority">Priority</Label>
                  <Select value={formData.priority} onValueChange={(value: any) => setFormData({ ...formData, priority: value })}>
                    <SelectTrigger id="priority">
                      <SelectValue placeholder="Select priority" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="URGENT">Urgent</SelectItem>
                      <SelectItem value="HIGH">High</SelectItem>
                      <SelectItem value="MEDIUM">Medium</SelectItem>
                      <SelectItem value="LOW">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div>
                <Label htmlFor="description">Description / Justification</Label>
                <Textarea 
                  id="description" 
                  placeholder="Provide details about why this material is required..."
                  className="min-h-[100px]"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                />
              </div>
              <div>
                <Label htmlFor="specifications">Technical Specifications</Label>
                <Textarea 
                  id="specifications" 
                  placeholder="Enter any specific technical requirements..."
                  value={formData.specifications}
                  onChange={(e) => setFormData({ ...formData, specifications: e.target.value })}
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowCreateIndent(false)}>
                Cancel
              </Button>
              <Button 
                onClick={handleCreateIndent}
                disabled={!formData.itemName || !formData.quantity || !formData.factoryId || !formData.requiredDate || createIndentMutation.isPending}
              >
                {createIndentMutation.isPending ? (
                  <><RefreshCw className="w-4 h-4 mr-2 animate-spin" /> Creating...</>
                ) : (
                  'Create Indent'
                )}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Review Indent Dialog */}
        {selectedIndent && (
          <Dialog open={!!selectedIndent} onOpenChange={() => setSelectedIndent(null)}>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>Review Material Indent</DialogTitle>
                <DialogDescription>
                  Indent No: {selectedIndent.indentNumber}
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-500">Item</p>
                    <p className="font-medium">{selectedIndent.itemName} {selectedIndent.itemCode && `(${selectedIndent.itemCode})`}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Quantity</p>
                    <p className="font-medium">{selectedIndent.quantity} {selectedIndent.unit}</p>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-500">Factory</p>
                    <p className="font-medium">{selectedIndent.factory?.name || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Requested By</p>
                    <p className="font-medium">{selectedIndent.requestedBy?.name || '-'}</p>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-500">Request Date</p>
                    <p className="font-medium">{format(new Date(selectedIndent.createdAt), 'dd MMM yyyy')}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Required Date</p>
                    <p className="font-medium">{format(new Date(selectedIndent.requiredDate), 'dd MMM yyyy')}</p>
                  </div>
                </div>
                <div>
                  <p className="text-sm text-gray-500">Priority</p>
                  <div className="mt-1">{getPriorityBadge(selectedIndent.priority)}</div>
                </div>
                <div>
                  <p className="text-sm text-gray-500">Description</p>
                  <p className="font-medium">{selectedIndent.description || '-'}</p>
                </div>
                {selectedIndent.specifications && (
                  <div>
                    <p className="text-sm text-gray-500">Technical Specifications</p>
                    <p className="font-medium">{selectedIndent.specifications}</p>
                  </div>
                )}
                <div className="border-t pt-4">
                  <Label htmlFor="remarks">Approval Remarks</Label>
                  <Textarea 
                    id="remarks" 
                    placeholder="Add any remarks for this approval..."
                    className="mt-1"
                    value={approvalRemarks}
                    onChange={(e) => setApprovalRemarks(e.target.value)}
                  />
                </div>
              </div>
              <DialogFooter>
                <Button 
                  variant="destructive" 
                  onClick={() => handleApproveReject(false)}
                  disabled={approveIndentMutation.isPending}
                >
                  {approveIndentMutation.isPending ? (
                    <><RefreshCw className="w-4 h-4 mr-2 animate-spin" /> Processing...</>
                  ) : (
                    <><XCircle className="w-4 h-4 mr-2" /> Reject</>
                  )}
                </Button>
                <Button variant="outline" onClick={() => setSelectedIndent(null)}>
                  Cancel
                </Button>
                <Button 
                  onClick={() => handleApproveReject(true)}
                  disabled={approveIndentMutation.isPending}
                >
                  {approveIndentMutation.isPending ? (
                    <><RefreshCw className="w-4 h-4 mr-2 animate-spin" /> Processing...</>
                  ) : (
                    <><CheckCircle className="w-4 h-4 mr-2" /> Approve</>
                  )}
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        )}
      </div>
    </DashboardLayout>
  );
}